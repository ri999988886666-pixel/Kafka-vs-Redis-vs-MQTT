import paho.mqtt.client as mqtt
import json
import time
from datetime import datetime
import random

class MQTTPublisher:
    def __init__(self, client_id):
        self.client = mqtt.Client(client_id)
        self.client.on_connect = self.on_connect
        self.client.on_publish = self.on_publish
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.client.connect("localhost", 1883, 60)
    
    def on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            print("‚úÖ MQTT Publisher connected successfully")
        else:
            print(f"‚ùå Failed to connect, return code {rc}")
    
    def on_publish(self, client, userdata, mid):
        print(f"üì§ Message {mid} published")
    
    def publish_sensor_data(self, device_id, sensor_type, value):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞"""
        topic = f"devices/{device_id}/sensors/{sensor_type}"
        
        payload = {
            "device_id": device_id,
            "sensor_type": sensor_type,
            "value": value,
            "timestamp": datetime.now().isoformat(),
            "battery": random.randint(10, 100)
        }
        
        # QoS 1 - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
        result = self.client.publish(
            topic, 
            json.dumps(payload), 
            qos=1,
            retain=True  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        )
        
        return result
    
    def publish_alert(self, device_id, alert_type, message, severity="medium"):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞"""
        topic = f"alerts/{device_id}/{alert_type}"
        
        payload = {
            "device_id": device_id,
            "alert_type": alert_type,
            "message": message,
            "severity": severity,
            "timestamp": datetime.now().isoformat()
        }
        
        # QoS 2 - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
        result = self.client.publish(
            topic,
            json.dumps(payload),
            qos=2
        )
        
        return result
    
    def start_publishing(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        self.client.loop_start()
        
        devices = [
            {"id": "thermostat_001", "type": "temperature"},
            {"id": "thermostat_001", "type": "humidity"},
            {"id": "motion_001", "type": "motion"}
        ]
        
        try:
            while True:
                for device in devices:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if device["type"] == "temperature":
                        value = round(random.uniform(18.0, 25.0), 1)
                    elif device["type"] == "humidity":
                        value = random.randint(40, 70)
                    else:
                        value = random.choice([0, 1])
                    
                    self.publish_sensor_data(
                        device["id"], 
                        device["type"], 
                        value
                    )
                
                # –°–ª—É—á–∞–π–Ω—ã–π –∞–ª–µ—Ä—Ç
                if random.random() < 0.1:  # 10% chance
                    self.publish_alert(
                        "thermostat_001",
                        "high_temperature",
                        "Temperature above threshold",
                        "high"
                    )
                
                time.sleep(5)  # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
        except KeyboardInterrupt:
            print("üõë Stopping publisher...")
            self.client.loop_stop()
            self.client.disconnect()

if __name__ == "__main__":
    publisher = MQTTPublisher("sensor_publisher_001")
    publisher.start_publishing()